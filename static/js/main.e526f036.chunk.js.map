{"version":3,"sources":["components/Gallery/Gallery.module.css","components/SearchForm/SearchForm.module.css","components/PhotoCard/PhotoCard.module.css","components/Modal/Modal.module.css","components/SearchForm/SearchForm.js","components/PhotoCard/PhotoCard.js","components/Modal/Modal.js","components/Gallery/Gallery.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchForm","handleSubmit","className","css","searchForm","onSubmit","type","autoComplete","placeholder","name","PhotoCard","webformatURL","largeImageURL","likes","views","comments","downloads","handleClick","photoCard","src","alt","data-image","galleryItem","stats","statsItem","fullscreenButton","onClick","Modal","escapeHandler","event","keyCode","props","closeModalinModal","handleOverlayClick","currentTarget","target","window","addEventListener","this","removeEventListener","modalUrl","modal","overlay","modalImage","closeButton","data-action","Component","Gallery","state","search","page","url","pics","displayModal","e","imageUrl","parentElement","querySelector","dataset","image","setState","a","preventDefault","newSearch","firstChild","value","prevState","startNewImagesSearch","loadMoreHandler","updateImagesSearch","prevProps","process","queryString","axios","get","picsAllData","newPicsData","data","hits","map","pic","oldPics","updatedPics","scrollTo","top","document","scrollHeight","behavior","Error","picsData","gallery","key","shortid","button","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e526f036.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gallery\":\"Gallery_gallery__vfJss\",\"button\":\"Gallery_button__3GNQx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchForm\":\"SearchForm_searchForm__8Znf-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photoCard\":\"PhotoCard_photoCard__2VrG_\",\"stats\":\"PhotoCard_stats__UtI3O\",\"statsItem\":\"PhotoCard_statsItem__b5lXd\",\"fullscreenButton\":\"PhotoCard_fullscreenButton__2YquT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__3UCLb\",\"overlay\":\"Modal_overlay__3h4CO\",\"modalImage\":\"Modal_modalImage__1g6LY\",\"closeButton\":\"Modal_closeButton__2kvcF\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport css from \"./SearchForm.module.css\";\n\nconst SearchForm = ({ handleSubmit }) => {\n    return (\n        <form className={css.searchForm} onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                autoComplete=\"off\"\n                placeholder=\"Search images...\"\n                name=\"search\"\n            />\n        </form>\n    );\n};\n\nSearchForm.propTypes = {\n    handleSubmit: PropTypes.func.isRequired\n};\n\nexport default SearchForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport css from \"./PhotoCard.module.css\";\n\nconst PhotoCard = ({\n    webformatURL,\n    largeImageURL,\n    likes,\n    views,\n    comments,\n    downloads,\n    handleClick\n}) => (\n    <div className={css.photoCard}>\n        <img\n            src={webformatURL}\n            alt=\"From Web\"\n            data-image={largeImageURL}\n            className={css.galleryItem}\n        />\n\n        <div className={css.stats}>\n            <p className={css.statsItem}>\n                <i className=\"material-icons\">thumb_up</i>\n                {likes}\n            </p>\n            <p className={css.statsItem}>\n                <i className=\"material-icons\">visibility</i>\n                {views}\n            </p>\n            <p className={css.statsItem}>\n                <i className=\"material-icons\">comment</i>\n                {comments}\n            </p>\n            <p className={css.statsItem}>\n                <i className=\"material-icons\">cloud_download</i>\n                {downloads}\n            </p>\n        </div>\n\n        <button\n            type=\"button\"\n            className={css.fullscreenButton}\n            onClick={handleClick}\n        >\n            <i className=\"material-icons\">zoom_out_map</i>\n        </button>\n    </div>\n);\n\nPhotoCard.propTypes = {\n    webformatURL: PropTypes.string.isRequired,\n    largeImageURL: PropTypes.string.isRequired,\n    likes: PropTypes.number.isRequired,\n    views: PropTypes.number.isRequired,\n    comments: PropTypes.number.isRequired,\n    downloads: PropTypes.number.isRequired,\n    handleClick: PropTypes.func.isRequired\n};\n\nexport default PhotoCard;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport css from \"./Modal.module.css\";\n\nclass Modal extends Component {\n    escapeHandler = event => {\n        if (event.keyCode === 27) {\n            this.props.closeModalinModal(event);\n        }\n    };\n\n    handleOverlayClick = event => {\n        if (event.currentTarget === event.target) {\n            this.props.closeModalinModal(event);\n        }\n    };\n\n    componentDidMount() {\n        window.addEventListener(\"keydown\", this.escapeHandler);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"keydown\", this.escapeHandler);\n    }\n\n    render() {\n        const { closeModalinModal, modalUrl } = this.props;\n\n        return (\n            <div className={css.modal}>\n                <div className={css.overlay} onClick={this.handleOverlayClick}>\n                    <img\n                        src={modalUrl}\n                        alt=\"other\"\n                        className={css.modalImage}\n                    ></img>\n                    <button\n                        type=\"button\"\n                        className={css.closeButton}\n                        data-action=\"close-lightbox\"\n                        onClick={closeModalinModal}\n                    >\n                        <i className=\"material-icons\">close</i>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nModal.propTypes = {\n    closeModalinModal: PropTypes.func.isRequired,\n    modalUrl: PropTypes.string.isRequired\n};\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport shortid from 'shortid';\nimport css from './Gallery.module.css';\nimport SearchForm from '../SearchForm';\nimport PhotoCard from '../PhotoCard/PhotoCard';\nimport Modal from '../Modal/Modal';\n\nclass Gallery extends Component {\n  // eslint-disable-next-line react/state-in-constructor\n  state = {\n    search: null,\n    page: 1,\n    url: `https://pixabay.com/api/`,\n    pics: [],\n    displayModal: false,\n    modalUrl: null,\n  };\n\n  async componentDidMount() {\n    await this.startNewImagesSearch();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    const { search, page } = this.state;\n\n    if (search !== prevState.search) {\n      await this.startNewImagesSearch();\n    }\n\n    if (page > prevState.page) {\n      await this.updateImagesSearch();\n    }\n  }\n\n  handleClick = e => {\n    const imageUrl = e.currentTarget.parentElement.querySelector('img').dataset\n      .image;\n\n    this.setState({\n      displayModal: !this.state.displayModal,\n      modalUrl: imageUrl,\n    });\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n    const newSearch = e.target.firstChild.value;\n    this.setState(prevState => ({\n      page: 1,\n      search: newSearch,\n      pics: [],\n    }));\n\n    await this.startNewImagesSearch();\n  };\n\n  loadMoreHandler = async () => {\n    const { page } = this.state;\n    this.setState({\n      page: page + 1,\n    });\n    await this.updateImagesSearch();\n  };\n\n  closeModalinModal = () => {\n    this.setState({\n      displayModal: !this.state.displayModal,\n    });\n  };\n\n  async updateImagesSearch() {\n    // eslint-disable-next-line camelcase\n    const { search, page, url, pics } = this.state;\n    const key = process.env.REACT_APP_API_KEY;\n    const queryString = `${url}?image_type=photo&orientation=horizontal&per_page=12&q=${search}&page=${page}&key=${key}`;\n\n    try {\n      const picsAllData = await axios.get(queryString);\n      const newPicsData = picsAllData.data.hits.map(pic => {\n        return {\n          webformatURL: pic.webformatURL,\n          largeImageURL: pic.largeImageURL,\n          likes: pic.likes,\n          views: pic.views,\n          comments: pic.comments,\n          downloads: pic.downloads,\n        };\n      });\n      const oldPics = pics;\n      const updatedPics = [...oldPics, ...newPicsData];\n      this.setState({\n        pics: [...updatedPics],\n      });\n      window.scrollTo({\n        top: document.querySelector('ul').scrollHeight,\n        behavior: 'smooth',\n      });\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  async startNewImagesSearch() {\n    // eslint-disable-next-line camelcase\n    const { search, page, url } = this.state;\n    const key = process.env.REACT_APP_API_KEY;\n    const queryString = `${url}?image_type=photo&orientation=horizontal&per_page=12&q=${search}&page=${page}&key=${key}`;\n\n    try {\n      const pics = await axios.get(queryString);\n      const picsData = pics.data.hits.map(pic => {\n        return {\n          webformatURL: pic.webformatURL,\n          largeImageURL: pic.largeImageURL,\n          likes: pic.likes,\n          views: pic.views,\n          comments: pic.comments,\n          downloads: pic.downloads,\n        };\n      });\n      this.setState({\n        pics: picsData,\n      });\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  render() {\n    let modal = null;\n\n    if (this.state.displayModal)\n      modal = (\n        <div>\n          <Modal\n            closeModalinModal={this.closeModalinModal}\n            modalUrl={this.state.modalUrl}\n          />\n        </div>\n      );\n\n    return (\n      <div>\n        <SearchForm handleSubmit={this.handleSubmit} />\n        <ul className={css.gallery}>\n          {this.state.pics.map(\n            ({\n              webformatURL,\n              largeImageURL,\n              likes,\n              views,\n              comments,\n              downloads,\n            }) => (\n              <li key={shortid()} className=\"galleryItem\">\n                <PhotoCard\n                  webformatURL={webformatURL}\n                  largeImageURL={largeImageURL}\n                  likes={likes}\n                  views={views}\n                  comments={comments}\n                  downloads={downloads}\n                  handleClick={this.handleClick}\n                />\n              </li>\n            ),\n          )}\n        </ul>\n\n        <button\n          type=\"button\"\n          className={css.button}\n          onClick={this.loadMoreHandler}\n        >\n          Load More\n        </button>\n        {modal}\n      </div>\n    );\n  }\n}\n\nexport default Gallery;\n","import React from \"react\";\nimport \"./App.css\";\nimport Gallery from \"./Gallery\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Gallery />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}